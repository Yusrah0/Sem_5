#include <stdio.h>
#include<stdbool.h>
#include<stdlib.h>
#define MAX 50
typedef struct{
    int id;
    int arrivaltime;
    int bursttime;
    int completiontime;
    int turnaroundtime;
    int waitingtime;
}Process;
typedef struct{
   Process queue[MAX];
   int front,rear;
}Queue;
void initialize(Queue* q){
    q->front = -1;
    q->rear = 0;
}
bool isfull(Queue* q){
    return (q->rear==MAX);
}
bool isempty(Queue* q){
    return (q->front == -1 || q->front > q->rear);
}
void enqueue(Queue* q,Process p){
    if(isfull(q)){
        printf("Queue is full\n");
        return;
    }
    q->queue[q->rear]=p;
    q->rear++;
    if(q->front== -1){
        q->front=0;
    }
}
Process dequeue(Queue* q){
    if(isempty(q)){
        printf("Queue is empty");
        exit(EXIT_FAILURE);
    }
   return q->queue[q->front++];
}
void fcfs(Process queue[],int n,Queue* q){
    float awt=0,atat=0;
    int time=0;
    while(!isempty(q)){
        Process current=dequeue(q);
        if(current.arrivaltime>time){
            time=current.arrivaltime;
        }
       queue[current.id-1].completiontime=time+current.bursttime;
       queue[current.id-1].turnaroundtime=time+current.bursttime-current.arrivaltime;
        atat+= current.turnaroundtime;
         queue[current.id-1].waitingtime=time-current.arrivaltime;
         awt+=current.waitingtime;
         time+=current.bursttime;
    }
}
int main() {
  Queue q;
  initialize(&q);
  int n;
  printf("Enter number of processes: ");
    scanf("%d", &n);
   Process queue[n];
    for (int i = 0; i < n; i++) {
        printf("Enter burst time and arrival time for Process %d: ", i + 1);
        queue[i].id = i + 1;
        scanf("%d %d", &queue[i].bursttime, &queue[i].arrivaltime);
        queue[i].completiontime=0;
         queue[i].turnaroundtime=0;
          queue[i].waitingtime=0;
        enqueue(&q,queue[i]);
    }
    fcfs(queue,n,&q);
    //display
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", queue[i].id, queue[i].bursttime, queue[i].arrivaltime,queue[i].completiontime,queue[i].turnaroundtime, queue[i].waitingtime);
    }
    return 0;
}
