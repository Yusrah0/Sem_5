#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#define MAX 50

typedef struct {
    int id;
    int arrivaltime;
    int bursttime;
    int remainingtime;  // To track remaining burst time
    int completiontime;
    int turnaroundtime;
    int waitingtime;
} Process;

typedef struct {
    Process queue[MAX];
    int front, rear;
} Queue;

void initialize(Queue* q) {
    q->front = -1;
    q->rear = 0;
}

bool isfull(Queue* q) {
    return (q->rear == MAX);
}

bool isempty(Queue* q) {
    return (q->front == -1 || q->front >= q->rear);
}

void enqueue(Queue* q, Process p) {
    if (isfull(q)) {
        printf("Queue is full\n");
        return;
    }
    q->queue[q->rear] = p;
    q->rear++;
    if (q->front == -1) {
        q->front = 0;
    }
}

Process dequeue(Queue* q) {
    if (isempty(q)) {
        printf("Queue is empty");
        exit(EXIT_FAILURE);
    }
    return q->queue[q->front++];
}

void roundRobin(Process queue[], int n, int quantum) {
    float awt = 0, atat = 0;
    int time = 0;
    Queue q;
    initialize(&q);

    // Load processes into the queue based on arrival time
    int completed = 0;
    while (completed < n) {
        for (int i = 0; i < n; i++) {
            if (queue[i].arrivaltime <= time && queue[i].remainingtime > 0) {
                enqueue(&q, queue[i]);
            }
        }

        if (!isempty(&q)) {
            Process current = dequeue(&q);
            if (current.remainingtime > quantum) {
                time += quantum;
                current.remainingtime -= quantum;
                enqueue(&q, current); // Put back into the queue
            } else {
                // Process can finish
                time += current.remainingtime;
                current.completiontime = time;
                current.turnaroundtime = current.completiontime - current.arrivaltime;
                current.waitingtime = current.turnaroundtime - current.bursttime;

                awt += current.waitingtime;
                atat += current.turnaroundtime;

                current.remainingtime = 0; // Mark as finished
                queue[current.id - 1] = current; // Update original queue
                completed++;
            }
        } else {
            time++; // No process is ready; increment time
        }
    }

    printf("Average Waiting Time: %.2f\n", awt / n);
    printf("Average Turnaround Time: %.2f\n", atat / n);
}

int main() {
    int n, quantum;
    printf("Enter number of processes: ");
    scanf("%d", &n);
    Process queue[n];

    for (int i = 0; i < n; i++) {
        printf("Enter burst time and arrival time for Process %d: ", i + 1);
        queue[i].id = i + 1;
        scanf("%d %d", &queue[i].bursttime, &queue[i].arrivaltime);
        queue[i].completiontime = 0;
        queue[i].turnaroundtime = 0;
        queue[i].waitingtime = 0;
        queue[i].remainingtime = queue[i].bursttime; // Initialize remaining time
    }

    printf("Enter time quantum: ");
    scanf("%d", &quantum);
    
    roundRobin(queue, n, quantum);

    // Display results
    printf("Process ID\tBurst Time\tArrival Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n",
            queue[i].id,
            queue[i].bursttime,
            queue[i].arrivaltime,
            queue[i].completiontime,
            queue[i].turnaroundtime,
            queue[i].waitingtime);
    }

    return 0;
}